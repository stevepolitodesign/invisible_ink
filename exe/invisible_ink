#!/usr/bin/env ruby
require_relative "../lib/invisible_ink"
require "optparse"

options = {}

begin
  OptionParser.new do |opts|
    opts.banner = "Usage: invisible_ink COMMAND [options]"

    opts.on("-w", "--write FILE", String, "Encrypt a file using an encryption key and open it in the specified $EDITOR") do |file|
      options[:command] = "write"
      options[:file] = file
    end

    opts.on("-r", "--read FILE", String, "Decrypt and display the content of an encrypted file") do |file|
      options[:command] = "read"
      options[:file] = file
    end

    opts.on("-s", "--setup", "Generate an encryption key, save it to a file, and add it to .gitignore") do
      options[:command] = "setup"
    end

    opts.on("-h", "--help", "Display help message") do
      puts opts
      exit
    end

    opts.on("-v", "--version", "Display Gem version") do
      puts InvisibleInk::VERSION
      exit
    end
  end.parse!
rescue OptionParser::MissingArgument => e
  puts "ERROR: #{e.message}. The #{e.args.first} command requires a file argument."
  puts ""
  puts "EXAMPLE: invisible_ink #{e.args.first} path/to/file.txt"
  exit 1
end

if options[:command].nil?
  puts "Invalid command. Run 'invisible_ink --help' for a list of available commands."
  exit 1
end

case options[:command]
when "write"
  file_path = options[:file]
  if ENV["EDITOR"].to_s.empty?
    puts "No $EDITOR to open file in. Assign one like this:"
    puts ""
    puts %(EDITOR="mate --wait" exe/invisible_ink write #{file_path})
    puts ""
    puts "For editors that fork and exit immediately, it's important to pass a wait flag;"
    puts "otherwise, the file will be saved immediately with no chance to edit."
    exit 1
  end
  begin
    encrypted_file = ActiveSupport::EncryptedFile.new(
      content_path: file_path,
      key_path: "invisible_ink.key",
      env_key: "INVISIBLE_INK_KEY",
      raise_if_missing_key: true
    )
    encrypted_file.write(nil) unless File.exist?(file_path)
    encrypted_file.change do |tmp_path|
      system(*Shellwords.split(ENV["EDITOR"]), tmp_path.to_s)
    rescue Interrupt
      puts "File not saved"
    end
  rescue ActiveSupport::EncryptedFile::MissingKeyError => error
    puts ""
    puts "ERROR: #{error}"
    puts ""
    puts "Did you run 'invisible_ink setup'?"
    exit 1
  end
when "read"
  begin
    file_path = options[:file]
    encrypted_file = ActiveSupport::EncryptedFile.new(
      content_path: file_path,
      key_path: "invisible_ink.key",
      env_key: "INVISIBLE_INK_KEY",
      raise_if_missing_key: true
    )
    puts encrypted_file.read
  rescue ActiveSupport::EncryptedFile::MissingKeyError => error
    puts ""
    puts "ERROR: #{error}"
    puts ""
    puts "Did you run 'invisible_ink setup'?"
    exit 1
  end
when "setup"
  if File.exist?("invisible_ink.key")
    puts "ERROR: invisible_ink.key already exists"
    exit 1
  else
    ignore_key = if File.exist?(".gitignore") && !File.read(".gitignore").empty?
      "\ninvisible_ink.key"
    else
      "invisible_ink.key"
    end
    File.open(".gitignore", "a") { |file| file.puts(ignore_key) }
    key = ActiveSupport::EncryptedFile.generate_key
    File.write("invisible_ink.key", key)
  end
end
